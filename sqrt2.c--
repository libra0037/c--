# This program reads an integer n and prints sqrt(2) with n digits.
# Using Newton's method and Number Theoretic Transform.

while 47 < (c = getc) & c < 58
	n = n * 10 + c - 48;
;
n = n + 4;
if 134217728 < n
	n = 134217728;
;
mod = 2013265921;
len = 1;
while len < n
	len = len * 2;
;
Rev = alloc(len * 2);
Rev[1] = 0;
i = j = 1;
while j < len
	while i < j * 2
		Rev[i * 2] = Rev[i];
		Rev[i * 2 + 1] = Rev[i] | j;
		i = i + 1;
	;
	j = j * 2;
;
l = 67108864;
w = 137;
while l < len == 0
	w = w * w % mod;
	l = l / 2;
;
W = alloc len;
W[l] = i = 1;
while i < l
	W[i + l] = W[i + l - 1] * w % mod;
	i = i + 1;
;
i = l - 1;
while i
	W[i] = W[i * 2];
	i = i - 1;
;
x = alloc 2;
x[0] = l = 1; x[1] = l2 = 4;
inv2 = (mod * 3 + 1) / 4;
while l < n
	rev = Rev + l2 * 8;
	new_x = alloc l2;
	xn = alloc l2;
	_i = x2 = alloc l2;
	_o = x2n = alloc l2;
	i = 0;
	while i < l2 / 2
		x2[i] = x[i];
		i = i + 1;
	;
	while i < l2
		x2[i] = 0;
		i = i + 1;
	;
	s = free x;
	while s < 4
		i = 0;
		while i < l2
			_o[rev[i]] = _i[i];
			i = i + 1;
		;
		i = 1;
		while i < l2
			w = W + i * 8;
			j = 0;
			while j < l2
				q = (p = _o + j * 8) + i * 8;
				k = 0;
				while k < i
					t = q[k] * w[k] % mod;
					q[k] = (p[k] + mod - t) % mod;
					p[k] = (p[k] + t) % mod;
					k = k + 1;
				;
				j = j + i + i;
			;
			i = i * 2;
		;
		if s & 1
			x2[0] = x2[0] * inv2 % mod;
			i = 1; j = l2 - 1;
			while j < i == 0
				t = x2[i] * inv2 % mod;
				x2[i] = x2[j] * inv2 % mod;
				x2[j] = t;
				i = i + 1;
				j = j - 1;
			;
			c = 0;
			if s & 2
				i = l2 + b - 1;
				while i < l2 == 0
					t = x2[i - b] + c;
					c = t / 10;
					i = i - 1;
				;
				while i < b == 0
					t = x2[i - b] + new_x[i] + c;
					c = t / 10;
					new_x[i] = t % 10;
					i = i - 1;
				;
				while c
					t = new_x[i] + c;
					c = t / 10;
					new_x[i] = t % 10;
					i = i - 1;
				;
			elif 1
				i = l2 - 1;
				while i
					t = x2[i] + c;
					c = t / 10;
					if t = t % 10
						x2[i] = 10 - t;
						c = c + 1;
						b = i;
					elif 1
						x2[i] = 0;
					;
					i = i - 1;
				;
				if x2[b] < 4 b = b + 1; ;
				c = x2[b - 1];
				i = 0;
				while i < l2 / 2 & i < l2 - b
					t = x2[i + b] + c * 10;
					c = t % 4;
					x2[i] = t / 4;
					i = i + 1;
				;
				while i < l2
					x2[i] = 0;
					i = i + 1;
				;
			;
		elif 1
			i = 0;
			while i < l2
				if (s & 2) == 0
					new_x[i] = x2[i];
					xn[i] = x2n[i];
				;
				x2n[i] = x2n[i] * xn[i] % mod;
				i = i + 1;
			;
		;
		t = _i;
		_i = _o;
		_o = t;
		s = s + 1;
	;
	free xn;
	free x2;
	free x2n;
	x = new_x;
	l = l * 2;
	if l2 < len
		l2 = l2 * 2;
		inv2 = inv2 * ((mod + 1) / 2) % mod;
	;
;
putc 49;
putc 46;
i = 1;
while i < n - 3
	putc(x[i] ^ 48);
	i = i + 1;
;
free x;
free Rev;
free W;
putc 10;